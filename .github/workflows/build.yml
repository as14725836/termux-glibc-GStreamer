name: Build GStreamer Decoders (aarch64)

on:
  workflow_dispatch:
  pull_request:

permissions:
  contents: write  # 允许 GITHUB_TOKEN 创建 Release

jobs:
  build:
    runs-on: ubuntu-24.04-arm

    steps:
    - name: 检出源码
      uses: actions/checkout@v4

    - name: 安装基础依赖
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential python3-pip git \
          pkg-config libglib2.0-dev libgstreamer1.0-dev \
          libgstreamer-plugins-base1.0-dev \
          liborc-0.4-dev libxv-dev libx11-dev \
          libasound2-dev libpulse-dev

    - name: 升级 Meson 和 Ninja 到最新版本
      run: |
        pip install --upgrade pip
        pip install --upgrade meson ninja
        meson --version
        ninja --version

    - name: 克隆 GStreamer 源码
      run: |
        git clone https://gitlab.freedesktop.org/gstreamer/gstreamer.git
        cd gstreamer
        git submodule update --init --recursive

    - name: 提取 GStreamer 版本号
      id: version
      run: |
        cd gstreamer
        VERSION=$(grep -Po "(?<=version: ')[^']+" meson.build)
        echo "Detected version: $VERSION"
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: 构建 GStreamer 解码器
      run: |
        cd gstreamer
        sudo mkdir -p /data/data/com.termux/files/usr/glibc
        sudo chmod 777 -R /data

        meson setup build \
          --libdir=lib \
          --prefix=/data/data/com.termux/files/usr/glibc \
          -Dbase=enabled \
          -Dgood=enabled \
          -Dugly=enabled \
          -Dbad=enabled \
          -Dlibav=enabled \
          -Dgpl=enabled \
          -Dtests=disabled \
          -Dexamples=disabled \
          -Dpython=disabled \
          -Dintrospection=disabled \
          -Dgst-full=enabled \
          -Dgst-full-plugins='*' \
          --buildtype=release

        ninja -C build -j$(nproc)
        ninja -C build install

    - name: 打包 glibc 文件夹 (附带版本号)
      run: |
        cd /data/data/com.termux/files/usr
        TAR_NAME="termux-glibc-gst-decoders-${VERSION}.tar.gz"
        tar -czvf ~/${TAR_NAME} glibc
        echo "TAR_NAME=${TAR_NAME}" >> $GITHUB_ENV

    - name: 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.TAR_NAME }}
        path: ~/$(echo ${{ env.TAR_NAME }})

    - name: 发布到 GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ env.VERSION }}
        name: GStreamer Decoders v${{ env.VERSION }} (aarch64, Termux glibc)
        files: ~/$(echo ${{ env.TAR_NAME }})
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 输出完成信息
      run: |
        echo "✅ GStreamer 解码器构建完成"
        echo "📦 输出文件: $TAR_NAME"
        echo "🔖 版本号: $VERSION"
