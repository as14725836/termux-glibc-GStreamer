name: Build GStreamer Decoders (aarch64, Dev)

on:
  workflow_dispatch:    # 手动触发
  schedule:             # 可保留每日检查源码更新
    - cron: '0 7 * * *'
  pull_request:

permissions:
  contents: write

env:
  LAST_COMMIT_FILE: last_gst_commit.txt
  INSTALL_ROOT: /data/data/com.termux/files/usr/glibc

jobs:
  build:
    runs-on: ubuntu-24.04-arm

    steps:
      # 🧩 检出源码
      - name: 检出源码
        uses: actions/checkout@v4

      # 📦 安装依赖
      - name: 安装基础依赖
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential python3-pip git pkg-config \
            libglib2.0-dev libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev \
            liborc-0.4-dev libxv-dev libx11-dev libasound2-dev libpulse-dev patchelf \
            libtheora-dev libvpx-dev libx264-dev libx265-dev libdav1d-dev libgav1-dev

      # ⚙️ 升级 Meson 和 Ninja
      - name: 升级 Meson 和 Ninja
        run: |
          pip install --upgrade pip
          pip install --upgrade meson ninja

      # 🧬 获取最新 commit
      - name: 获取最新 GStreamer 提交
        id: get_latest
        run: |
          git clone https://gitlab.freedesktop.org/gstreamer/gstreamer.git
          cd gstreamer
          git checkout main
          git pull origin main
          git submodule update --init --recursive
          echo "LATEST_COMMIT=$(git rev-parse HEAD)" >> $GITHUB_ENV

      # 💾 获取上次构建 commit
      - name: 获取上次构建 commit
        id: get_last
        run: |
          FILE=${{ env.LAST_COMMIT_FILE }}
          if [ -f "$FILE" ]; then
            LAST_COMMIT=$(cat "$FILE")
          else
            echo "none" > "$FILE"
            LAST_COMMIT="none"
          fi
          echo "LAST_COMMIT=$LAST_COMMIT" >> $GITHUB_ENV

      # 🔍 判断是否需要构建
      - name: 判断是否需要构建
        id: check_build
        run: |
          if [ "$LATEST_COMMIT" = "$LAST_COMMIT" ]; then
            echo "skip_build=true" >> $GITHUB_OUTPUT
          else
            echo "skip_build=false" >> $GITHUB_OUTPUT
          fi

      # ⏭️ 跳过无更新构建
      - name: 跳过无更新构建
        if: steps.check_build.outputs.skip_build == 'true'
        run: |
          echo "🟡 无新提交，跳过构建。"
          exit 0

      # 🛠️ 构建 GStreamer 解码器
      - name: 构建 GStreamer 解码器
        if: steps.check_build.outputs.skip_build == 'false'
        run: |
          cd gstreamer
          sudo mkdir -p $INSTALL_ROOT
          sudo chmod -R 777 /data
          echo "⚙️ Meson setup..."
          meson setup build \
            --prefix=$INSTALL_ROOT \
            --libdir=lib \
            -Dlibexecdir=lib/gstreamer1.0 \
            -Dbase=enabled -Dgood=enabled -Dugly=enabled -Dbad=enabled \
            -Dlibav=enabled -Dgpl=enabled -Ddefault_library=shared \
            -Dtests=disabled -Ddoc=disabled -Dexamples=disabled \
            -Dpython=disabled -Dintrospection=disabled \
            -Dgst-full=enabled -Dgst-full-plugins='*' \
            --buildtype=release
          echo "🏗️ 编译..."
          ninja -C build -j$(nproc)
          echo "📦 安装..."
          ninja -C build install

      # 🧩 修补 ELF
      - name: 修补 ELF 可执行文件
        if: steps.check_build.outputs.skip_build == 'false'
        run: |
          INTERP=$INSTALL_ROOT/lib/ld-linux-aarch64.so.1
          for dir in "$INSTALL_ROOT/bin" "$INSTALL_ROOT/lib/gstreamer1.0/gstreamer-1.0"; do
            if [ -d "$dir" ]; then
              echo "🔧 修补目录: $dir"
              for f in "$dir"/*; do
                if file "$f" | grep -q 'ELF'; then
                  patchelf --set-interpreter "$INTERP" "$f" || true
                fi
              done
            fi
          done

      # 🧱 打包构建结果
      - name: 打包 glibc 目录
        if: steps.check_build.outputs.skip_build == 'false'
        run: |
          cd /data/data/com.termux/files/usr
          TAR_NAME="termux-glibc-gst-decoders-${LATEST_COMMIT:0:7}.tar.gz"
          tar -czvf /home/runner/$TAR_NAME glibc
          echo "TAR_NAME=$TAR_NAME" >> $GITHUB_ENV
          echo "$LATEST_COMMIT" > ${{ env.LAST_COMMIT_FILE }}

      # ⬆️ 上传构建产物
      - name: 上传构建产物
        if: steps.check_build.outputs.skip_build == 'false'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.TAR_NAME }}
          path: /home/runner/${{ env.TAR_NAME }}

      # 💾 上传 last commit
      - name: 上传 last commit 记录
        if: steps.check_build.outputs.skip_build == 'false'
        uses: actions/upload-artifact@v4
        with:
          name: last-gst-decoders-commit
          path: ${{ env.LAST_COMMIT_FILE }}
          retention-days: 365

      # 🚀 发布到 Release（可选）
      - name: 发布到 GitHub Release
        if: steps.check_build.outputs.skip_build == 'false'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.TAR_NAME }}
          name: "GStreamer Decoders ${{ env.TAR_NAME }} (aarch64, Termux glibc)"
          body: |
            ✅ 自动构建成功！
            🔖 Commit: [${{ env.LATEST_COMMIT }}](https://gitlab.freedesktop.org/gstreamer/gstreamer/-/commit/${{ env.LATEST_COMMIT }})
            📦 文件名: `${{ env.TAR_NAME }}`
          files: /home/runner/${{ env.TAR_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
