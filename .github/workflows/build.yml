name: Build GStreamer Decoders (aarch64, Dev)

on:
  workflow_dispatch:
  schedule:
    - cron: '0 7 * * *'
  pull_request:

permissions:
  contents: write
  packages: write

env:
  LAST_COMMIT_FILE: last_gst_commit.txt
  INSTALL_ROOT: /data/data/com.termux/files/usr/glibc

jobs:
  build:
    runs-on: ubuntu-24.04-arm

    steps:
      # 🧩 检出当前仓库
      - name: 检出 workflow 仓库
        uses: actions/checkout@v4

      # 📦 安装依赖
      - name: 安装基础依赖
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential python3-pip git pkg-config \
            libglib2.0-dev libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev \
            liborc-0.4-dev libxv-dev libx11-dev libasound2-dev libpulse-dev patchelf \
            libtheora-dev libmpg123-dev libvpx-dev libx264-dev libx265-dev libdav1d-dev libgav1-dev

      # ⚙️ 升级 Meson 和 Ninja
      - name: 升级 Meson 和 Ninja
        run: |
          pip install --upgrade pip
          pip install --upgrade meson ninja

      # 🧬 克隆 GStreamer 开发版本
      - name: 克隆 GStreamer 开发版本
        run: |
          git clone --depth=1 https://gitlab.freedesktop.org/gstreamer/gstreamer.git

      # 🔍 获取开发版本信息
      - name: 获取开发版本信息
        id: get_dev_info
        run: |
          cd gstreamer
          LATEST_COMMIT=$(git rev-parse HEAD)
          COMMIT_SHORT=$(git rev-parse --short HEAD)
          AUTHOR=$(git log -1 --pretty=format:'%an')
          DATE=$(date -u '+%Y-%m-%d %H:%M UTC')
          COMMIT_DATE=$(git log -1 --pretty=format:'%cd' --date=short)
          VERSION=$(sed -n '2p' "meson.build" | grep -oP "version\s*:\s*'\K[^']+")
          echo "LATEST_COMMIT=$LATEST_COMMIT" >> $GITHUB_ENV
          echo "COMMIT_SHORT=$COMMIT_SHORT" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "AUTHOR=$AUTHOR" >> $GITHUB_ENV
          echo "BUILD_DATE=$DATE" >> $GITHUB_ENV
          echo "COMMIT_DATE=$COMMIT_DATE" >> $GITHUB_ENV
          echo "🆕 开发版本: $VERSION"
          echo "🧬 最新提交: $LATEST_COMMIT"

      # 💾 获取上次构建提交
      - name: 获取上次构建提交
        id: get_last_commit
        run: |
          FILE=${{ env.LAST_COMMIT_FILE }}
          if [ -f "$FILE" ]; then
            LAST_COMMIT=$(cat "$FILE")
          else
            echo "none" > "$FILE"
            LAST_COMMIT="none"
          fi
          echo "LAST_COMMIT=$LAST_COMMIT" >> $GITHUB_ENV
          echo "📦 上次构建提交: $LAST_COMMIT"

      # 🔍 判断是否需要构建
      - name: 判断是否需要构建
        id: check_build
        run: |
          if [ "$LATEST_COMMIT" = "$LAST_COMMIT" ]; then
            echo "skip_build=true" >> $GITHUB_OUTPUT
            echo "🟡 提交未更新，跳过构建。"
          else
            echo "skip_build=false" >> $GITHUB_OUTPUT
            echo "✅ 发现新提交: $LATEST_COMMIT"
          fi

      # ⏭️ 跳过无更新构建
      - name: 跳过无更新构建
        if: steps.check_build.outputs.skip_build == 'true'
        run: exit 0

      # 🛠️ 构建 GStreamer 解码器（开发版本）
      - name: 构建 GStreamer 解码器
        if: steps.check_build.outputs.skip_build == 'false'
        run: |
          cd gstreamer
          echo "🔄 更新子模块..."
          git submodule update --init --recursive
          
          sudo mkdir -p $INSTALL_ROOT
          sudo chmod -R 777 /data
          
          echo "⚙️ 配置构建系统..."
          meson setup build \
            --prefix=$INSTALL_ROOT \
            --libdir=lib \
            -Dlibexecdir=lib/gstreamer1.0 \
            -Dbase=enabled -Dgood=enabled -Dugly=enabled -Dbad=enabled \
            -Dlibav=enabled -Dgpl=disabled -Ddefault_library=shared \
            -Dtests=disabled -Ddoc=disabled -Dexamples=disabled \
            -Dpython=disabled -Dintrospection=disabled \
            -Dgst-full=enabled -Dgst-full-plugins='*' \
            -Ddevtools=enabled -Drtsp_server=disabled \
            -Dgst-plugins-bad:hip=disabled -Dgst-plugins-bad:nvcodec=disabled -Dgst-plugins-base:gl=disabled \
            \
            -Dgstreamer:check=disabled \
            -Dgstreamer:benchmarks=disabled \
            -Dgstreamer:libunwind=disabled \
            -Dgstreamer:libdw=disabled \
            -Dgstreamer:bash-completion=disabled \
            -Dgst-plugins-good:cairo=disabled \
            -Dgst-plugins-good:gdk-pixbuf=disabled \
            -Dgst-plugins-good:oss=disabled \
            -Dgst-plugins-good:oss4=disabled \
            -Dgst-plugins-good:v4l2=disabled \
            -Dgst-plugins-good:aalib=disabled \
            -Dgst-plugins-good:jack=disabled \
            -Dgst-plugins-good:pulse=enabled \
            -Dgst-plugins-good:adaptivedemux2=disabled \
            -Dgst-plugins-good:libcaca=disabled \
            -Dgst-plugins-good:mpg123=enabled \
            -Dgst-plugins-base:examples=disabled \
            -Dgst-plugins-base:alsa=enabled \
            -Dgst-plugins-base:pango=disabled \
            -Dgst-plugins-base:x11=enabled \
            -Dgst-plugins-base:gl_winsys=x11 \
            -Dgst-plugins-bad:gpl=enabled \
            -Dgst-plugins-bad:androidmedia=disabled \
            -Dgst-plugins-bad:rtmp=disabled \
            -Dgst-plugins-bad:shm=disabled \
            -Dgst-plugins-bad:zbar=disabled \
            -Dgst-plugins-bad:webp=disabled \
            -Dgst-plugins-bad:hls-crypto=openssl \
            -Dgst-plugins-bad:kms=disabled \
            -Dgst-plugins-bad:vulkan=enabled \
            -Dgst-plugins-bad:vulkan-windowing=x11 \
            -Dgst-plugins-bad:vulkan-video=enabled \
            -Dgst-plugins-bad:dash=disabled \
            -Dgst-plugins-bad:analyticsoverlay=disabled \
            -Dgst-plugins-bad:uvch264=disabled \
            -Dgst-plugins-bad:v4l2codecs=disabled \
            -Dgst-plugins-bad:udev=disabled \
            -Dgst-plugins-bad:libde265=enabled \
            -Dgst-plugins-bad:smoothstreaming=disabled \
            -Dgst-plugins-bad:fluidsynth=disabled \
            -Dgst-plugins-bad:inter=disabled \
            --buildtype=release 2>&1 | tee ../meson-setup.log
          
          echo "🏗️ 编译中..."
          ninja -C build -j$(nproc) 2>&1 | tee ../ninja-build.log
          
          echo "📦 安装中..."
          ninja -C build install 2>&1 | tee ../ninja-install.log
          
          echo "✅ GStreamer 开发版本构建完成"

      # 🧩 修补 ELF 解释器
      - name: 修补 ELF 可执行文件
        if: steps.check_build.outputs.skip_build == 'false'
        run: |
          INTERP=$INSTALL_ROOT/lib/ld-linux-aarch64.so.1
          echo "🔧 修补 ELF 解释器: $INTERP"
          for dir in "$INSTALL_ROOT/bin" "$INSTALL_ROOT/lib" "$INSTALL_ROOT/lib/gstreamer1.0"; do
            [ -d "$dir" ] || continue
            echo "📁 修补目录: $dir"
            find "$dir" -type f -exec file {} \; | grep 'ELF' | cut -d: -f1 | \
              while read f; do
                patchelf --set-interpreter "$INTERP" "$f" 2>/dev/null || true
              done
          done

      # 🧱 打包构建结果
      - name: 打包 glibc 目录
        if: steps.check_build.outputs.skip_build == 'false'
        run: |
          cd /data/data/com.termux/files/usr
          TAR_NAME="termux-glibc-gst-decoders-${VERSION}.tar.gz"
          echo "📦 打包: $TAR_NAME"
          tar -czvf /home/runner/$TAR_NAME glibc
          echo "TAR_NAME=$TAR_NAME" >> $GITHUB_ENV
          echo "$LATEST_COMMIT" > ${{ env.LAST_COMMIT_FILE }}
          echo "✅ 打包完成: $TAR_NAME"

      # ⬆️ 上传构建产物
      - name: 上传构建产物
        if: steps.check_build.outputs.skip_build == 'false'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.TAR_NAME }}
          path: /home/runner/${{ env.TAR_NAME }}

      # 💾 上传提交记录
      - name: 上传提交记录
        if: steps.check_build.outputs.skip_build == 'false'
        uses: actions/upload-artifact@v4
        with:
          name: last-gst-commit
          path: ${{ env.LAST_COMMIT_FILE }}
          retention-days: 365

      # 🚀 发布到 GitHub Release
      - name: 发布到 GitHub Release
        if: steps.check_build.outputs.skip_build == 'false'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.VERSION }}
          name: "GStreamer Decoders ${{ env.VERSION }} (aarch64, Termux glibc)"
          body: |
            ## 🎯 GStreamer 开发版本构建
            
            ### 📋 构建信息
            - **版本**: `${{ env.VERSION }}`
            - **架构**: aarch64
            - **环境**: Termux glibc
            - **提交**: [`${{ env.COMMIT_SHORT }}`](https://gitlab.freedesktop.org/gstreamer/gstreamer/-/commit/${{ env.LATEST_COMMIT }})
            - **提交日期**: ${{ env.COMMIT_DATE }}
            - **作者**: `${{ env.AUTHOR }}`
            - **构建时间**: `${{ env.BUILD_DATE }}`
            
            ### 🛠️ 构建特性
            - ✅ base / good / ugly / bad / libav / devtools
            - ✅ Vulkan 解码支持
            - ✅ ALSA / PulseAudio 音频支持
            - ❌ 无 RTSP / 无 AndroidMedia / 无 Docs / 无 Tests
            
            ### 📦 文件信息
            - **文件名**: `${{ env.TAR_NAME }}`
            - **包含**: 完整 GStreamer 安装 + 日志
            
            ### ⚠️ 注意事项
            - 此为开发版本，可能包含不稳定特性
            - 建议仅用于测试或开发用途
            
            ### 📥 使用方法
            ```bash
            tar -xvf termux-glibc-gst-decoders-*.tar.gz -C /data/data/com.termux/files/usr/
            export GST_PLUGIN_PATH=/data/data/com.termux/files/usr/glibc/lib/gstreamer1.0
            gst-inspect-1.0 --version
            ```
          files: /home/runner/${{ env.TAR_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
