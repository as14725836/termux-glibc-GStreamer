name: Build GStreamer Decoders (aarch64, Dev)

on:
  workflow_dispatch:
  schedule:
    - cron: '0 7 * * *'
  pull_request:

permissions:
  contents: write

env:
  LAST_TAG_FILE: last_gst_tag.txt
  INSTALL_ROOT: /data/data/com.termux/files/usr/glibc

jobs:
  build:
    runs-on: ubuntu-24.04-arm

    steps:
      # 🧩 检出当前仓库
      - name: 检出 workflow 仓库
        uses: actions/checkout@v4

      # 📦 安装依赖
      - name: 安装基础依赖
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential python3-pip git pkg-config \
            libglib2.0-dev libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev \
            liborc-0.4-dev libxv-dev libx11-dev libasound2-dev libpulse-dev patchelf \
            libtheora-dev libvpx-dev libx264-dev libx265-dev libdav1d-dev libgav1-dev

      # ⚙️ 升级 Meson 和 Ninja
      - name: 升级 Meson 和 Ninja
        run: |
          pip install --upgrade pip
          pip install --upgrade meson ninja

      # 🧬 获取 GStreamer 最新标签、提交、作者
      - name: 获取 GStreamer 最新信息
        id: get_latest
        run: |
          git clone https://gitlab.freedesktop.org/gstreamer/gstreamer.git
          cd gstreamer
          git fetch --tags
          LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
          CLEAN_TAG=$(echo "$LATEST_TAG" | sed 's/^v//')
          LATEST_COMMIT=$(git rev-list -n 1 "$LATEST_TAG")
          AUTHOR=$(git log -1 --pretty=format:'%an')
          DATE=$(date -u '+%Y-%m-%d %H:%M UTC')
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV
          echo "CLEAN_TAG=$CLEAN_TAG" >> $GITHUB_ENV
          echo "LATEST_COMMIT=$LATEST_COMMIT" >> $GITHUB_ENV
          echo "AUTHOR=$AUTHOR" >> $GITHUB_ENV
          echo "BUILD_DATE=$DATE" >> $GITHUB_ENV
          echo "🆕 最新标签: $LATEST_TAG"
          echo "🧬 最新提交: $LATEST_COMMIT"
          echo "👤 作者: $AUTHOR"
          echo "🕓 构建时间: $DATE"

      # 💾 获取上次构建标签
      - name: 获取上次构建标签
        id: get_last
        run: |
          FILE=${{ env.LAST_TAG_FILE }}
          if [ -f "$FILE" ]; then
            LAST_TAG=$(cat "$FILE")
          else
            echo "none" > "$FILE"
            LAST_TAG="none"
          fi
          echo "LAST_TAG=$LAST_TAG" >> $GITHUB_ENV
          echo "📦 上次构建标签: $LAST_TAG"

      # 🔍 判断是否需要构建
      - name: 判断是否需要构建
        id: check_build
        run: |
          if [ "$LATEST_TAG" = "$LAST_TAG" ]; then
            echo "skip_build=true" >> $GITHUB_OUTPUT
            echo "🟡 标签未更新，跳过构建。"
          else
            echo "skip_build=false" >> $GITHUB_OUTPUT
            echo "✅ 发现新版本: $LATEST_TAG"
          fi

      # ⏭️ 跳过无更新构建
      - name: 跳过无更新构建
        if: steps.check_build.outputs.skip_build == 'true'
        run: exit 0

      # 🛠️ 构建 GStreamer 解码器
      - name: 构建 GStreamer 解码器
        if: steps.check_build.outputs.skip_build == 'false'
        run: |
          cd gstreamer
          git checkout "$LATEST_TAG"
          git submodule update --init --recursive
          sudo mkdir -p $INSTALL_ROOT
          sudo chmod -R 777 /data
          echo "⚙️ Meson setup..."
          meson setup build \
            --prefix=$INSTALL_ROOT \
            --libdir=lib \
            -Dlibexecdir=lib/gstreamer1.0 \
            -Dbase=enabled -Dgood=enabled -Dugly=enabled -Dbad=enabled \
            -Dlibav=enabled -Dgpl=enabled -Ddefault_library=shared \
            -Dtests=disabled -Ddoc=disabled -Dexamples=disabled \
            -Dpython=disabled -Dintrospection=disabled \
            -Dgst-full=enabled -Dgst-full-plugins='*' \
            --buildtype=release
          echo "🏗️ 编译中..."
          ninja -C build -j$(nproc)
          echo "📦 安装中..."
          ninja -C build install

      # 🧩 修补 ELF
      - name: 修补 ELF 可执行文件
        if: steps.check_build.outputs.skip_build == 'false'
        run: |
          INTERP=$INSTALL_ROOT/lib/ld-linux-aarch64.so.1
          for dir in "$INSTALL_ROOT/bin" "$INSTALL_ROOT/lib/gstreamer1.0/gstreamer-1.0"; do
            if [ -d "$dir" ]; then
              echo "🔧 修补目录: $dir"
              for f in "$dir"/*; do
                if file "$f" | grep -q 'ELF'; then
                  patchelf --set-interpreter "$INTERP" "$f" || true
                fi
              done
            fi
          done

      # 🧱 打包构建结果
      - name: 打包 glibc 目录
        if: steps.check_build.outputs.skip_build == 'false'
        run: |
          cd /data/data/com.termux/files/usr
          TAR_NAME="termux-glibc-gst-decoders-${CLEAN_TAG}.tar.gz"
          tar -czvf /home/runner/$TAR_NAME glibc
          echo "TAR_NAME=$TAR_NAME" >> $GITHUB_ENV
          echo "$LATEST_TAG" > ${{ env.LAST_TAG_FILE }}
          echo "✅ 打包完成: $TAR_NAME"

      # ⬆️ 上传构建产物
      - name: 上传构建产物
        if: steps.check_build.outputs.skip_build == 'false'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.TAR_NAME }}
          path: /home/runner/${{ env.TAR_NAME }}

      # 💾 上传 last tag
      - name: 上传 last tag 记录
        if: steps.check_build.outputs.skip_build == 'false'
        uses: actions/upload-artifact@v4
        with:
          name: last-gst-decoders-tag
          path: ${{ env.LAST_TAG_FILE }}
          retention-days: 365

      # 🚀 发布到 GitHub Release
      - name: 发布到 GitHub Release
        if: steps.check_build.outputs.skip_build == 'false'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.LATEST_TAG }}
          name: "GStreamer Decoders ${{ env.CLEAN_TAG }} (aarch64, Termux glibc)"
          body: |
            ✅ **自动构建成功！**
            🕓 **构建时间：** ${{ env.BUILD_DATE }}
            🏷️ **标签版本：** [${{ env.LATEST_TAG }}](https://gitlab.freedesktop.org/gstreamer/gstreamer/-/tags/${{ env.LATEST_TAG }})
            🧬 **最新提交：** [${{ env.LATEST_COMMIT }}](https://gitlab.freedesktop.org/gstreamer/gstreamer/-/commit/${{ env.LATEST_COMMIT }})
            👤 **提交作者：** ${{ env.AUTHOR }}
            📦 **构建产物：** `${{ env.TAR_NAME }}`
          files: /home/runner/${{ env.TAR_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
